// This is Prisma schema file,
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  attendances Attendance[]
  courses     Course[]     @relation("TeacherCourses")
  enrollments Enrollment[]
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  teacher     User         @relation("TeacherCourses", fields: [teacherId], references: [id])
  enrollments Enrollment[]
  attendances Attendance[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  date      DateTime
  status    AttendanceStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
import { NextApiRequest, NextApiResponse } from 'next'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'

const prisma = new PrismaClient()

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' })
  }

  const { email, password } = req.body

  try {
    const user = await prisma.user.findUnique({ where: { email } })

    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' })
    }

    const isPasswordValid = await bcrypt.compare(password, user.password)

    if (!isPasswordValid) {
      return res.status(400).json({ message: 'Invalid credentials' })
    }

    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET as string,
      { expiresIn: '1d' }
    )

    res.status(200).json({ token, user: { id: user.id, name: user.name, role: user.role } })
  } catch (error) {
    console.error('Login error:', error)
    res.status(500).json({ message: 'Internal server error' })
  }
} 
import { NextApiRequest, NextApiResponse } from 'next'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' })
  }

  const { name, email, password, role } = req.body

  try {
    const existingUser = await prisma.user.findUnique({ where: { email } })

    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' })
    }

    const hashedPassword = await bcrypt.hash(password, 10)

    const user = await prisma.user.create({
      data: {
        name,
        email,
        password: hashedPassword,
        role,
      },
    })

    res.status(201).json({ message: 'User created successfully', user: { id: user.id, name: user.name, role: user.role } })
  } catch (error) {
    console.error('Registration error:', error)
    res.status(500).json({ message: 'Internal server error' })
  }
}
import { NextApiRequest, NextApiResponse } from 'next'
import { PrismaClient } from '@prisma/client'
import { getSession } from 'next-auth/react'

const prisma = new PrismaClient()

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getSession({ req })

  if (!session) {
    return res.status(401).json({ message: 'Unauthorized' })
  }

  if (req.method === 'POST') {
    const { courseId, date, status, userId } = req.body

    try {
      const attendance = await prisma.attendance.create({
        data: {
          courseId,
          date: new Date(date),
          status,
          userId,
        },
      })

      res.status(201).json(attendance)
    } catch (error) {
      console.error('Attendance creation error:', error)
      res.status(500).json({ message: 'Internal server error' })
    }
  } else if (req.method === 'GET') {
    const { courseId, date } = req.query

    try {
      const attendances = await prisma.attendance.findMany({
        where: {
          courseId: courseId as string,
          date: date ? new Date(date as string) : undefined,
        },
        include: {
          user: {
            select: {
              id: true,
              name: true,
            },
          },
        },
      })

      res.status(200).json(attendances)
    } catch (error) {
      console.error('Attendance fetch error:', error)
      res.status(500).json({ message: 'Internal server error' })
    }
  } else {
    res.status(405).json({ message: 'Method not allowed' })
  }
}
import React from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useSession, signOut } from 'next-auth/react'

const Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const router = useRouter()
  const { data: session } = useSession()

  return (
    <div className="min-h-screen bg-gray-100">
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <Link href="/" className="flex-shrink-0 flex items-center">
                LMS
              </Link>
              <div className="hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8">
                <Link
                  href="/dashboard"
                  className={`${
                    router.pathname === '/dashboard'
                      ? 'border-indigo-500 text-gray-900'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                >
                  Dashboard
                </Link>
                {session?.user.role === 'TEACHER' && (
                  <Link
                    href="/courses"
                    className={`${
                      router.pathname === '/courses'
                        ? 'border-indigo-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                  >
                    Courses
                  </Link>
                )}
                {session?.user.role === 'ADMIN' && (
                  <Link
                    href="/users"
                    className={`${
                      router.pathname === '/users'
                        ? 'border-indigo-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                  >
                    Users
                  </Link>
                )}
              </div>
            </div>
            <div className="hidden sm:ml-6 sm:flex sm:items-center">
              {session ? (
                <button
                  onClick={() => signOut()}
                  className="ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Sign out
                </button>
              ) : (
                <Link
                  href="/login"
                  className="ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Sign in
                </Link>
              )}
            </div>
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">{children}</main>
    </div>
  )
}

export default Layout
import { useSession } from 'next-auth/react'
import Layout from '../components/Layout'
import StudentDashboard from '../components/StudentDashboard'
import TeacherDashboard from '../components/TeacherDashboard'
import AdminDashboard from '../components/AdminDashboard'

export default function Dashboard() {
  const { data: session } = useSession()

  if (!session) {
    return <div>Loading...</div>
  }

  return (
    <Layout>
      {session.user.role === 'STUDENT' && <StudentDashboard />}
      {session.user.role === 'TEACHER' && <TeacherDashboard />}
      {session.user.role === 'ADMIN' && <AdminDashboard />}
    </Layout>
  )
}
import React, { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'

interface Attendance {
  id: string
  userId: string
  courseId: string
  date: string
  status: 'PRESENT' | 'ABSENT' | 'LATE'
  user: {
    id: string
    name: string
  }
}

interface AttendanceTrackerProps {
  courseId: string
}

const AttendanceTracker: React.FC<AttendanceTrackerProps> = ({ courseId }) => {
  const [attendances, setAttendances] = useState<Attendance[]>([])
  const [date, setDate] = useState(new Date().toISOString().split('T')[0])
  const { data: session } = useSession()

  useEffect(() => {
    fetchAttendances()
  }, [courseId, date])

  const fetchAttendances = async () => {
    const res = await fetch(`/api/attendance?courseId=${courseId}&date=${date}`)
    const data = await res.json()
    setAttendances(data)
  }

  const updateAttendance = async (userId: string, status: 'PRESENT' | 'ABSENT' | 'LATE') => {
    const res = await fetch('/api/attendance', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId,
        date,
        status,
        userId,
      }),
    })

    if (res.ok) {
      fetchAttendances()
    }
  }

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Attendance Tracker</h2>
      <input
        type="date"
        value={date}
        onChange={(e) => setDate(e.target.value)}
        className="mb-4 p-2 border rounded"
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            {session?.user.role === 'TEACHER' && (
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            )}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {attendances.map((attendance) => (
            <tr key={attendance.id}>
              <td className="px-6 py-4 whitespace-nowrap">{attendance.user.name}</td>
              <td className="px-6 py-4 whitespace-nowtd className="px-6 py-4 whitespace-nowrap">{attendance.status}</td>
              {session?.user.role === 'TEACHER' && (
                <td className="px-6 py-4 whitespace-nowrap">
                  <button
                    onClick={() => updateAttendance(attendance.user.id, 'PRESENT')}
                    className="mr-2 px-3 py-1 bg-green-500 text-white rounded"
                  >
                    Present
                  </button>
                  <button
                    onClick={() => updateAttendance(attendance.user.id, 'ABSENT')}
                    className="mr-2 px-3 py-1 bg-red-500 text-white rounded"
                  >
                    Absent
                  </button>
                  <button
                    onClick={() => updateAttendance(attendance.user.id, 'LATE')}
                    className="px-3 py-1 bg-yellow-500 text-white rounded"
                  >
                    Late
                  </button>
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

export default AttendanceTracker
import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import Layout from '../../components/Layout'
import Link from 'next/link'

interface Course {
  id: string
  name: string
  description: string
}

export default function Courses() {
  const [courses, setCourses] = useState<Course[]>([])
  const { data: session } = useSession()

  useEffect(() => {
    fetchCourses()
  }, [])

  const fetchCourses = async () => {
    const res = await fetch('/api/courses')
    const data = await res.json()
    setCourses(data)
  }

  return (
    <Layout>
      <h1 className="text-2xl font-bold mb-4">My Courses</h1>
      <Link
        href="/courses/create"
        className="mb-4 inline-block px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
      >
        Create New Course
      </Link>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {courses.map((course) => (
          <div key={course.id} className="bg-white shadow rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-2">{course.name}</h2>
            <p className="text-gray-600 mb-4">{course.description}</p>
            <Link
              href={`/courses/${course.id}`}
              className="text-indigo-600 hover:text-indigo-800"
            >
              View Course
            </Link>
          </div>
        ))}
      </div>
    </Layout>
  )
}
import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import Layout from '../../components/Layout'
import Link from 'next/link'

interface User {
  id: string
  name: string
  email: string
  role: string
}

export default function Users() {
  const [users, setUsers] = useState<User[]>([])
  const { data: session } = useSession()

  useEffect(() => {
    fetchUsers()
  }, [])

  const fetchUsers = async () => {
    const res = await fetch('/api/users')
    const data = await res.json()
    setUsers(data)
  }

  return (
    <Layout>
      <h1 className="text-2xl font-bold mb-4">User Management</h1>
      <Link
        href="/users/create"
        className="mb-4 inline-block px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
      >
        Create New User
      </Link>
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Email
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Role
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {users.map((user) => (
            <tr key={user.id}>
              <td className="px-6 py-4 whitespace-nowrap">{user.name}</td>
              <td className="px-6 py-4 whitespace-nowrap">{user.email}</td>
              <td className="px-6 py-4 whitespace-nowrap">{user.role}</td>
              <td className="px-6 py-4 whitespace-nowrap">
                <Link
                  href={`/users/${user.id}/edit`}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Edit
                </Link>
                <button
                  onClick={() => deleteUser(user.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </Layout>
  )
}
import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import Layout from '../../components/Layout'

interface Course {
  id: string
  name: string
  description: string
}

export default function EnrollCourses() {
  const [courses, setCourses] = useState<Course[]>([])
  const { data: session } = useSession()

  useEffect(() => {
    fetchAvailableCourses()
  }, [])

  const fetchAvailableCourses = async () => {
    const res = await fetch('/api/courses/available')
    const data = await res.json()
    setCourses(data)
  }

  const enrollCourse = async (courseId: string) => {
    const res = await fetch('/api/courses/enroll', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ courseId }),
    })

    if (res.ok) {
      // Remove enrolled course from the list
      setCourses(courses.filter((course) => course.id !== courseId))
    }
  }

  return (
    <Layout>
      <h1 className="text-2xl font-bold mb-4">Enroll in Courses</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {courses.map((course) => (
          <div key={course.id} className="bg-white shadow rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-2">{course.name}</h2>
            <p className="text-gray-600 mb-4">{course.description}</p>
            <button
              onClick={() => enrollCourse(course.id)}
              className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
            >
              Enroll
            </button>
          </div>
        ))}
      </div>
    </Layout>
  )
}


